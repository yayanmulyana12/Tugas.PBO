/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package login;

/**
 *
 * @author LENOVO
 */
import javax.swing.*;
import javax.swing.Timer;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;




public class menu extends javax.swing.JFrame {

    /**
     * Creates new form menu
     */
    private JTextField[] quantityFields; // Array JTextField untuk memasukkan jumlah makanan.
    private JCheckBox[] selectionCheckboxes; //Array JCheckBox untuk memilih makanan.
    public menu() {
        
    initComponents();
    btnBayar.setEnabled(false); // Tombol bayar dinonaktifkan saat aplikasi pertama kali dijalankan.
        
    StokMakanan controller = new StokMakanan(); // Membuat instance dari kelas StokMakanan untuk mengelola stok makanan.
    Map<String, Integer> stokMakanan = controller.getStokMakanan();// Mendapatkan stok makanan dari kelas StokMakanan dalam bentuk Map.
    SimpleDateFormat tanggalFormat = new SimpleDateFormat("dd-MM-yyyy");
    SimpleDateFormat waktuFormat = new SimpleDateFormat("HH:mm:ss");
    Timer timer = new Timer(1000, e -> {// Membuat Timer untuk memperbarui tanggal dan waktu setiap detik 
    Date sekarang = new Date(); // Membuat instance Date untuk mendapatkan waktu saat ini.
    textFieldTanggal.setText(tanggalFormat.format(sekarang));
    textFieldWaktu.setText(waktuFormat.format(sekarang));
    });
    timer.start();   // Memulai Timer untuk terus memperbarui waktu. 
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        chkNasiGoreng = new javax.swing.JCheckBox();
        jSpinnerNasiGoreng = new javax.swing.JSpinner();
        jSpinnerBakso = new javax.swing.JSpinner();
        chkBakso = new javax.swing.JCheckBox();
        jSpinnerNasiUduk = new javax.swing.JSpinner();
        chkNasiUduk = new javax.swing.JCheckBox();
        chkBatagor = new javax.swing.JCheckBox();
        jSpinnerBatagor = new javax.swing.JSpinner();
        jSpinnerCireng = new javax.swing.JSpinner();
        chkCireng = new javax.swing.JCheckBox();
        jSpinnerAyamGeprek = new javax.swing.JSpinner();
        chkAyamGeprek = new javax.swing.JCheckBox();
        jSpinnerBuburAyam = new javax.swing.JSpinner();
        chkBuburAyam = new javax.swing.JCheckBox();
        jSpinnerSeblak = new javax.swing.JSpinner();
        chkSeblak = new javax.swing.JCheckBox();
        chkMieGoreng = new javax.swing.JCheckBox();
        jSpinnerMieGoreng = new javax.swing.JSpinner();
        jSpinnerMieRebus = new javax.swing.JSpinner();
        chkMieRebus = new javax.swing.JCheckBox();
        chkAyamKatsu = new javax.swing.JCheckBox();
        jSpinnerAyamKatsu = new javax.swing.JSpinner();
        chkNasiPadang = new javax.swing.JCheckBox();
        jSpinnerNasiPadang = new javax.swing.JSpinner();
        jSpinnerKare = new javax.swing.JSpinner();
        chkKare = new javax.swing.JCheckBox();
        chkSushi = new javax.swing.JCheckBox();
        jSpinnerSushi = new javax.swing.JSpinner();
        btnReset = new javax.swing.JButton();
        btnTotal = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnBayar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPajak = new javax.swing.JTextField();
        txtTotalHargaMakanan = new javax.swing.JTextField();
        txtTotalKeseluruhan = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        rincian = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        textFieldWaktu = new javax.swing.JTextField();
        textFieldTanggal = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gambar/Group 97.png"))); // NOI18N
        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        chkNasiGoreng.setText("Beli Ini");
        chkNasiGoreng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNasiGorengActionPerformed(evt);
            }
        });
        jPanel1.add(chkNasiGoreng, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, -1, -1));
        jPanel1.add(jSpinnerNasiGoreng, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, 60, 20));
        jPanel1.add(jSpinnerBakso, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 270, 60, 20));

        chkBakso.setText("Beli Ini");
        chkBakso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBaksoActionPerformed(evt);
            }
        });
        jPanel1.add(chkBakso, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 290, -1, -1));
        jPanel1.add(jSpinnerNasiUduk, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 270, 60, 20));

        chkNasiUduk.setText("Beli Ini");
        chkNasiUduk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNasiUdukActionPerformed(evt);
            }
        });
        jPanel1.add(chkNasiUduk, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 290, -1, -1));

        chkBatagor.setText("Beli Ini");
        chkBatagor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBatagorActionPerformed(evt);
            }
        });
        jPanel1.add(chkBatagor, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 290, -1, -1));
        jPanel1.add(jSpinnerBatagor, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 270, 60, 20));
        jPanel1.add(jSpinnerCireng, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 270, 60, 20));

        chkCireng.setText("Beli Ini");
        chkCireng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCirengActionPerformed(evt);
            }
        });
        jPanel1.add(chkCireng, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 290, -1, -1));
        jPanel1.add(jSpinnerAyamGeprek, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 270, 60, 20));

        chkAyamGeprek.setText("Beli Ini");
        chkAyamGeprek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAyamGeprekActionPerformed(evt);
            }
        });
        jPanel1.add(chkAyamGeprek, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 290, -1, -1));
        jPanel1.add(jSpinnerBuburAyam, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 270, 60, 20));

        chkBuburAyam.setText("Beli Ini");
        chkBuburAyam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBuburAyamActionPerformed(evt);
            }
        });
        jPanel1.add(chkBuburAyam, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 290, -1, -1));
        jPanel1.add(jSpinnerSeblak, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 480, 60, 20));

        chkSeblak.setText("Beli Ini");
        chkSeblak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSeblakActionPerformed(evt);
            }
        });
        jPanel1.add(chkSeblak, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, -1, -1));

        chkMieGoreng.setText("Beli Ini");
        chkMieGoreng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMieGorengActionPerformed(evt);
            }
        });
        jPanel1.add(chkMieGoreng, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 500, -1, -1));
        jPanel1.add(jSpinnerMieGoreng, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 480, 60, 20));
        jPanel1.add(jSpinnerMieRebus, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 480, 60, 20));

        chkMieRebus.setText("Beli Ini");
        chkMieRebus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMieRebusActionPerformed(evt);
            }
        });
        jPanel1.add(chkMieRebus, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 500, -1, -1));

        chkAyamKatsu.setText("Beli Ini");
        chkAyamKatsu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAyamKatsuActionPerformed(evt);
            }
        });
        jPanel1.add(chkAyamKatsu, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 500, -1, -1));
        jPanel1.add(jSpinnerAyamKatsu, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 480, 60, 20));

        chkNasiPadang.setText("Beli Ini");
        chkNasiPadang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNasiPadangActionPerformed(evt);
            }
        });
        jPanel1.add(chkNasiPadang, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 500, -1, -1));
        jPanel1.add(jSpinnerNasiPadang, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 480, 60, 20));
        jPanel1.add(jSpinnerKare, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 480, 60, 20));

        chkKare.setText("Beli Ini");
        chkKare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkKareActionPerformed(evt);
            }
        });
        jPanel1.add(chkKare, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 500, -1, -1));

        chkSushi.setText("Beli Ini");
        chkSushi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSushiActionPerformed(evt);
            }
        });
        jPanel1.add(chkSushi, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 500, -1, -1));
        jPanel1.add(jSpinnerSushi, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 480, 60, 20));

        btnReset.setBackground(new java.awt.Color(255, 75, 58));
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        jPanel1.add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 560, -1, -1));

        btnTotal.setBackground(new java.awt.Color(255, 75, 58));
        btnTotal.setForeground(new java.awt.Color(255, 255, 255));
        btnTotal.setText("Total");
        btnTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTotalActionPerformed(evt);
            }
        });
        jPanel1.add(btnTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 560, -1, -1));

        btnExit.setBackground(new java.awt.Color(255, 75, 58));
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        jPanel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 560, -1, -1));

        btnBayar.setBackground(new java.awt.Color(255, 75, 58));
        btnBayar.setForeground(new java.awt.Color(255, 255, 255));
        btnBayar.setText("Bayar");
        btnBayar.setEnabled(false);
        btnBayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBayarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBayar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 560, -1, -1));

        jPanel2.setBackground(new java.awt.Color(255, 75, 58));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Pajak");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Total Harga Makanan");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Total Keseluruhan");

        txtPajak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPajakActionPerformed(evt);
            }
        });

        txtTotalHargaMakanan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalHargaMakananActionPerformed(evt);
            }
        });

        txtTotalKeseluruhan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalKeseluruhanActionPerformed(evt);
            }
        });

        rincian.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama Makanan", "Jumlah"
            }
        ));
        rincian.setGridColor(new java.awt.Color(255, 255, 255));
        rincian.setSelectionBackground(new java.awt.Color(255, 255, 255));
        rincian.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                rincianAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(rincian);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPajak)
                            .addComponent(txtTotalHargaMakanan)
                            .addComponent(txtTotalKeseluruhan)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPajak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTotalHargaMakanan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtTotalKeseluruhan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 100, 260, 490));

        jPanel3.setBackground(new java.awt.Color(255, 75, 58));

        textFieldWaktu.setBackground(new java.awt.Color(255, 75, 58));
        textFieldWaktu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textFieldWaktu.setForeground(new java.awt.Color(255, 255, 255));
        textFieldWaktu.setBorder(null);
        textFieldWaktu.setCaretColor(new java.awt.Color(255, 75, 58));
        textFieldWaktu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldWaktuActionPerformed(evt);
            }
        });

        textFieldTanggal.setBackground(new java.awt.Color(255, 75, 58));
        textFieldTanggal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textFieldTanggal.setForeground(new java.awt.Color(255, 255, 255));
        textFieldTanggal.setBorder(null);
        textFieldTanggal.setCaretColor(new java.awt.Color(255, 75, 58));
        textFieldTanggal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldTanggalActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("<html> Ayo Temukan<br> Makanan Kesukaanmu</html> ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(991, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(textFieldTanggal, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textFieldWaktu, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldWaktu, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldTanggal, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1210, 100));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gambar/Group 97.png"))); // NOI18N
        jLabel8.setText("jLabel8");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(-30, 100, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkNasiGorengActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNasiGorengActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkNasiGorengActionPerformed

    private void chkBaksoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBaksoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkBaksoActionPerformed

    private void chkNasiUdukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNasiUdukActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkNasiUdukActionPerformed

    private void chkBatagorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBatagorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkBatagorActionPerformed

    private void chkCirengActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCirengActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkCirengActionPerformed

    private void chkAyamGeprekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAyamGeprekActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkAyamGeprekActionPerformed

    private void chkBuburAyamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBuburAyamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkBuburAyamActionPerformed

    private void chkSeblakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSeblakActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkSeblakActionPerformed

    private void chkMieGorengActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMieGorengActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkMieGorengActionPerformed

    private void chkMieRebusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMieRebusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkMieRebusActionPerformed

    private void chkAyamKatsuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAyamKatsuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkAyamKatsuActionPerformed

    private void chkNasiPadangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNasiPadangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkNasiPadangActionPerformed

    private void chkKareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkKareActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkKareActionPerformed

    private void chkSushiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSushiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkSushiActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
    // TODO add your handling code here:
    // Atur nilai awal jSpinner untuk setiap makanan ke 0 
    jSpinnerNasiGoreng.setValue(0);
    jSpinnerBakso.setValue(0);
    jSpinnerNasiUduk.setValue(0);
    jSpinnerBatagor.setValue(0);
    jSpinnerCireng.setValue(0);
    jSpinnerAyamGeprek.setValue(0);
    jSpinnerBuburAyam.setValue(0);
    jSpinnerSeblak.setValue(0);
    jSpinnerMieGoreng.setValue(0);
    jSpinnerMieRebus.setValue(0);
    jSpinnerAyamKatsu.setValue(0);
    jSpinnerNasiPadang.setValue(0);
    jSpinnerKare.setValue(0);
    jSpinnerSushi.setValue(0);
    
    // Atur nilai awal chkbox untuk setiap makanan ke false
    chkNasiGoreng.setSelected(false);
    chkBakso.setSelected(false);
    chkNasiUduk.setSelected(false);
    chkBatagor.setSelected(false);
    chkCireng.setSelected(false);
    chkAyamGeprek.setSelected(false);
    chkBuburAyam.setSelected(false);
    chkSeblak.setSelected(false);
    chkMieGoreng.setSelected(false);
    chkMieRebus.setSelected(false);
    chkAyamKatsu.setSelected(false);
    chkNasiPadang.setSelected(false);
    chkKare.setSelected(false);
    chkSushi.setSelected(false);
    // Reset nilai total harga makanan, pajak, dan total keseluruhan menjadi string kosong
    txtTotalHargaMakanan.setText("");
    txtPajak.setText("");
    txtTotalKeseluruhan.setText("");
    btnBayar.setEnabled(false);  // Nonaktifkan tombol bayar saat reset
    // Mengosongkan tabel rincian pesanan dengan cara menghapus semua baris
    DefaultTableModel model = (DefaultTableModel) rincian.getModel();
    model.setRowCount(0);
    }//GEN-LAST:event_btnResetActionPerformed
    
    private boolean isTotalHitung = true; // Variabel untuk melacak apakah tombol Total sudah ditekan sebelumnya
    private void btnTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalActionPerformed
        // TODO add your handling code here:
        StokMakanan controller = new StokMakanan(); // Membuat instance dari kelas StokMakanan untuk mendapatkan stok makanan
        Map<String, Integer> stokMakanan = controller.getStokMakanan(); // Mendapatkan stok makanan dalam bentuk Map (nama makanan -> stok tersedia)
        // Mengosongkan tabel rincian untuk menampilkan data baru
        DefaultTableModel model = (DefaultTableModel) rincian.getModel();
        model.setRowCount(0);
        // Variabel untuk melacak apakah ada menu yang dipilih
        boolean isMenuSelected = false;
        // Memeriksa apakah salah satu checkbox makanan dipilih oleh pengguna
            if (chkNasiGoreng.isSelected() || chkBakso.isSelected() || chkNasiUduk.isSelected() || 
                  chkBatagor.isSelected() || chkCireng.isSelected() || chkAyamGeprek.isSelected() || 
                     chkBuburAyam.isSelected() || chkSeblak.isSelected() || chkMieGoreng.isSelected() || 
                         chkMieRebus.isSelected() || chkAyamKatsu.isSelected() || chkNasiPadang.isSelected() || 
                            chkKare.isSelected() || chkSushi.isSelected()) {
                                isMenuSelected = true; //Set menjadi true jika ada menu yang dipilih
    }
    // Jika tidak ada menu yang dipilih, tampilkan pesan peringatan dan hentikan eksekusi
    if (!isMenuSelected) {
        JOptionPane.showMessageDialog(this, "Harap pilih salah satu menu terlebih dahulu.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
    }
    // Jika total sudah dihitung sebelumnya, beri peringatan dan hentikan eksekusi
    if (isTotalHitung) {
        JOptionPane.showMessageDialog(this, "Total sudah dihitung, lanjutkan ke pembayaran atau reset untuk memulai baru.");     
    }
         double totalHarga = 0;// Total harga makanan yang dipesan
         double pajak = 0.1; // Pajak sebesar 10%
         List<Object[]> orderDetails = new ArrayList<>(); // List untuk menyimpan rincian pesanan
         
        if (chkNasiGoreng.isSelected()) {
            int qty = (int) jSpinnerNasiGoreng.getValue(); // Ambil jumlah Nasi Goreng dari spinner
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
         
        int stokTersedia = stokMakanan.getOrDefault("Nasi Goreng", 0); // Ambil stok Nasi Goreng dari database
        
            if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Nasi Goreng tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 10000; // Tambahkan harga Nasi Goreng ke total harga
            if (qty > 0) {
            model.addRow(new Object[]{"Nasi Goreng", qty}); // Tambahkan ke tabel rincian
            orderDetails.add(new Object[]{"Nasi Goreng", qty}); // Tambahkan ke list rincian
             // Kurangi stok dan update di database
            controller.updateStokMakanan("Nasi Goreng", stokTersedia - qty);
            
        }
        }
        if (chkBakso.isSelected()) {
            int qty = (int) jSpinnerBakso.getValue();
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
        int stokTersedia = stokMakanan.getOrDefault("Bakso", 0); // Ambil stok Nasi Goreng dari database
        
            if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Bakso tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 10000;
            if (qty > 0) {
            model.addRow(new Object[]{"Bakso", qty});
            orderDetails.add(new Object[]{"Bakso", qty});
            controller.updateStokMakanan("Bakso", stokTersedia - qty);
        }
        }
        if (chkNasiUduk.isSelected()) {
            int qty = (int) jSpinnerNasiUduk.getValue();
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
        int stokTersedia = stokMakanan.getOrDefault("Nasi Uduk", 0); // Ambil stok Nasi Goreng dari database
        
        if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Nasi Uduk tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 15000;
            if (qty > 0) {
            model.addRow(new Object[]{"Nasi Uduk", qty});
            orderDetails.add(new Object[]{"Nasi Uduk", qty});
            controller.updateStokMakanan("Nasi Uduk", stokTersedia - qty);
        }
        }
        if (chkBatagor.isSelected()) {
            int qty = (int) jSpinnerBatagor.getValue();
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
        int stokTersedia = stokMakanan.getOrDefault("Batagor", 0); // Ambil stok Nasi Goreng dari database
        
        if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Batagor tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 5000;
            if (qty > 0) {
            model.addRow(new Object[]{"Batagor", qty});
            orderDetails.add(new Object[]{"Batagor", qty});
            controller.updateStokMakanan("Batagor", stokTersedia - qty);
        }
        }
        if (chkCireng.isSelected()) {
            int qty = (int) jSpinnerCireng.getValue();
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
        int stokTersedia = stokMakanan.getOrDefault("Cireng", 0); // Ambil stok Nasi Goreng dari database
        
        if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Cireng tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 5000;
            if (qty > 0) {
            model.addRow(new Object[]{"Cireng", qty});
            orderDetails.add(new Object[]{"Cireng", qty});
            controller.updateStokMakanan("Cireng", stokTersedia - qty);
        }
        }
        if (chkAyamGeprek.isSelected()) {
            int qty = (int) jSpinnerAyamGeprek.getValue();
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
        int stokTersedia = stokMakanan.getOrDefault("Ayam Geprek", 0); // Ambil stok Nasi Goreng dari database
        
        if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Ayam Geprek tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 10000;
            if (qty > 0) {
            model.addRow(new Object[]{"Ayam Geprek", qty});
            controller.updateStokMakanan("Ayam Geprek", stokTersedia - qty);
        }
        }
        if (chkBuburAyam.isSelected()) {
            int qty = (int) jSpinnerBuburAyam.getValue();
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
        int stokTersedia = stokMakanan.getOrDefault("Bubur Ayam", 0); // Ambil stok Nasi Goreng dari database
        
        if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Bubur Ayam tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 8000;
            if (qty > 0) {
            model.addRow(new Object[]{"Bubur Ayam", qty});
            orderDetails.add(new Object[]{"Bubur Ayam", qty});
            controller.updateStokMakanan("Bubur Ayam", stokTersedia - qty);
        }
        }
        if (chkSeblak.isSelected()) {
            int qty = (int) jSpinnerSeblak.getValue();
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
        int stokTersedia = stokMakanan.getOrDefault("Seblak", 0); // Ambil stok Nasi Goreng dari database
        
        if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Seblak tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 15000;
            if (qty > 0) {
            model.addRow(new Object[]{"Seblak", qty});
            orderDetails.add(new Object[]{"Seblak", qty});
            controller.updateStokMakanan("Seblak", stokTersedia - qty);
        }
        }
        if (chkMieGoreng.isSelected()) {
            int qty = (int) jSpinnerMieGoreng.getValue();
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
        int stokTersedia = stokMakanan.getOrDefault("Mie Goreng", 0); // Ambil stok Nasi Goreng dari database
        
        if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Mie Goreng tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 10000;
             if (qty > 0) {
            model.addRow(new Object[]{"Mie Goreng", qty});
            orderDetails.add(new Object[]{"Mie Goreng", qty});
            controller.updateStokMakanan("Mie Goreng", stokTersedia - qty);
        }
        }
        if (chkMieRebus.isSelected()) {
            int qty = (int) jSpinnerMieRebus.getValue();
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
        int stokTersedia = stokMakanan.getOrDefault("Mie Rebus", 0); // Ambil stok Nasi Goreng dari database
        
        if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Mie Rebus tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 10000;
            if (qty > 0) {
            model.addRow(new Object[]{"Mie Rebus", qty});
            orderDetails.add(new Object[]{"Mie Rebus", qty});
            controller.updateStokMakanan("Mie Rebus", stokTersedia - qty);
        }
        }
        if (chkAyamKatsu.isSelected()) {
            int qty = (int) jSpinnerAyamKatsu.getValue();
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
        int stokTersedia = stokMakanan.getOrDefault("Ayam Katsu", 0); // Ambil stok Nasi Goreng dari database
        
        if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Ayam Katsu tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 10000;
            if (qty > 0) {
            model.addRow(new Object[]{"Ayam Katsu", qty});
            orderDetails.add(new Object[]{"Ayam Katsu", qty});
            controller.updateStokMakanan("Ayam Katsu", stokTersedia - qty);
        }
        }
        if (chkNasiPadang.isSelected()) {
            int qty = (int) jSpinnerNasiPadang.getValue();
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
        int stokTersedia = stokMakanan.getOrDefault("Nasi Padang", 0); // Ambil stok Nasi Goreng dari database
        
        if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Nasi Padang tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 10000;
            if (qty > 0) {
            model.addRow(new Object[]{"Nasi Padang", qty});
            orderDetails.add(new Object[]{"Nasi Padang", qty});
            controller.updateStokMakanan("Nasi Padang", stokTersedia - qty);
        }
        }
        if (chkKare.isSelected()) {
            int qty = (int) jSpinnerKare.getValue();
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
        int stokTersedia = stokMakanan.getOrDefault("Kare", 0); // Ambil stok Nasi Goreng dari database
        
        if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Kare tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 10000;
            if (qty > 0) {
            model.addRow(new Object[]{"Kare", qty});
            orderDetails.add(new Object[]{"Kare", qty});
            controller.updateStokMakanan("Kare", stokTersedia - qty);
        }
        }
        if (chkSushi.isSelected()) {
            int qty = (int) jSpinnerSushi.getValue();
            if (qty < 0) {
        JOptionPane.showMessageDialog(this, "Jumlah tidak boleh negatif.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
        }
        int stokTersedia = stokMakanan.getOrDefault("Sushi", 0); // Ambil stok Nasi Goreng dari database
        
        if (qty > stokTersedia) {
            JOptionPane.showMessageDialog(this, "Stok Shusi tidak mencukupi! Tersisa: " + stokTersedia, "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
            totalHarga += qty * 10000;
            if (qty > 0) {
            model.addRow(new Object[]{"Sushi", qty});
            orderDetails.add(new Object[]{"Sushi", qty});
            controller.updateStokMakanan("Sushi", stokTersedia - qty);
        }
        }
        double totalPajak = totalHarga * pajak;// Hitung total pajak dari total harga makanan (pajak 10% dari totalHarga)
        double totalKeseluruhan = totalHarga + totalPajak; // Hitung total keseluruhan yang harus dibayar (total harga + pajak)
        txtPajak.setText(String.format("Rp%.2f", totalPajak));
        txtTotalHargaMakanan.setText(String.format("Rp%.2f", totalHarga));
        txtTotalKeseluruhan.setText(String.format("Rp%.2f", totalKeseluruhan));
        btnBayar.setEnabled(true); // Aktifkan tombol "Bayar" setelah total dihitung
        // Simpan rincian pesanan ke dalam repository menggunakan class OrderRepository
        OrderRepository orderRepo = new OrderRepository();
        orderRepo.saveOrderDetails(orderDetails);
    }//GEN-LAST:event_btnTotalActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:                                        
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnBayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBayarActionPerformed
        // TODO add your handling code here:
        double totalHarga = 0; // Inisialisasi total harga menjadi 0 sebelum melakukan perhitungan lebih lanjut
        Pembayaran pembayaran = new Pembayaran(); // Membuat objek baru dari kelas Pembayaran untuk menampilkan layar pembayaran
        pembayaran.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBayarActionPerformed

    private void txtPajakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPajakActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPajakActionPerformed

    private void txtTotalHargaMakananActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalHargaMakananActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalHargaMakananActionPerformed

    private void txtTotalKeseluruhanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalKeseluruhanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalKeseluruhanActionPerformed

    private void rincianAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_rincianAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_rincianAncestorAdded

    private void textFieldWaktuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldWaktuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldWaktuActionPerformed

    private void textFieldTanggalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldTanggalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldTanggalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBayar;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnTotal;
    private javax.swing.JCheckBox chkAyamGeprek;
    private javax.swing.JCheckBox chkAyamKatsu;
    private javax.swing.JCheckBox chkBakso;
    private javax.swing.JCheckBox chkBatagor;
    private javax.swing.JCheckBox chkBuburAyam;
    private javax.swing.JCheckBox chkCireng;
    private javax.swing.JCheckBox chkKare;
    private javax.swing.JCheckBox chkMieGoreng;
    private javax.swing.JCheckBox chkMieRebus;
    private javax.swing.JCheckBox chkNasiGoreng;
    private javax.swing.JCheckBox chkNasiPadang;
    private javax.swing.JCheckBox chkNasiUduk;
    private javax.swing.JCheckBox chkSeblak;
    private javax.swing.JCheckBox chkSushi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerAyamGeprek;
    private javax.swing.JSpinner jSpinnerAyamKatsu;
    private javax.swing.JSpinner jSpinnerBakso;
    private javax.swing.JSpinner jSpinnerBatagor;
    private javax.swing.JSpinner jSpinnerBuburAyam;
    private javax.swing.JSpinner jSpinnerCireng;
    private javax.swing.JSpinner jSpinnerKare;
    private javax.swing.JSpinner jSpinnerMieGoreng;
    private javax.swing.JSpinner jSpinnerMieRebus;
    private javax.swing.JSpinner jSpinnerNasiGoreng;
    private javax.swing.JSpinner jSpinnerNasiPadang;
    private javax.swing.JSpinner jSpinnerNasiUduk;
    private javax.swing.JSpinner jSpinnerSeblak;
    private javax.swing.JSpinner jSpinnerSushi;
    private javax.swing.JTable rincian;
    private javax.swing.JTextField textFieldTanggal;
    private javax.swing.JTextField textFieldWaktu;
    private javax.swing.JTextField txtPajak;
    private javax.swing.JTextField txtTotalHargaMakanan;
    private javax.swing.JTextField txtTotalKeseluruhan;
    // End of variables declaration//GEN-END:variables
}
